# GitHub Actions WorkFlow

name: Deploy to AWS - Trunk Branch (STAGE environment)

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop branch
on:
  workflow_dispatch:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.gitignore'
    branches: [ trunk ]

jobs:
  Build-Deploy:
    name: Build-Deploy
    runs-on: ubuntu-latest
    env:
      region : ap-southeast-2
      prefix: p2
      domain: p2.practera.com
      subdomain: cutie-app
      stage : test
      deploy: stage
      BUILD_CONFIG: custom
      hostedZoneId: Z06923333Q5BRF2ANDFEG
      repo-name: practera-cutie-app

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      # Setup Node Environemnt
      - name: Node.js environment
        uses: actions/setup-node@v1
      
      # Install Serverless Framework
      - name: Install Serverless Framework
        run: npm i -g serverless @angular/cli forever

      # Cache Node modules
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Install npm Dependencies requried for prod only.
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        # run:  npm install --only=prod
        run:  npm install 


      # Run lint test
      - name: Run lint Test if present only
        run:  npm run lint --if-present

      # # Run unit test 
      # - name: Run unit test if present only
      #   run:  npm run sonar-test --if-present


      # # Run Sonarcloudscan
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Configure AWS credentials from P2 AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.P2_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.P2_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.region }}
      
      - name: Serverless ACM SSL Certification creation
        run: |
          serverless create-cert
      
      - name: Serverless Deploy
        run: |
          serverless deploy --stage ${{ env.stage }} --region ${{ env.region }} -v

      - name: Custom Environemnt variables
        run: |
          ${{ secrets.P2_CUTIE_APP_STAGE_CUSTOM_ENV }}
          chmod +x env.sh && ./env.sh
          cat src/environments/environment.custom.ts
      
      - name: Cloudformation Environemnt variables
        run: |
          echo "Extracting Cloudformation output as environment variable"
          export STACK_NAME=${{ env.prefix }}-${{ env.repo-name }}-${{env.stage}}
          export S3Bucket=${{ env.prefix }}-CutieAppS3Bucket-${{env.deploy}}
          export CDN=${{env.prefix}}-CutieAppCloudFrontDistributionID-${{env.deploy}}
          echo "CutieAppCDN="$(aws cloudformation list-exports --query "Exports[?Name==\`$CDN\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "CutieAppS3="$(aws cloudformation list-exports --query "Exports[?Name==\`$S3Bucket\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "CutieAppS3: "${{env.CutieAppS3}}
          echo "CutieAppCDN: "${{env.CutieAppCDN}}

      - name: Building web packages
        run: |
          printf '' > src/environments/environment.ts
          ng build --configuration=${{ env.BUILD_CONFIG }}
          # npm run build --configuration=${{ env.BUILD_CONFIG }}

      - name: AWS S3 Sync operation
        run: aws s3 sync www/ s3://${{env.CutieAppS3}} --delete

      - name: AWS Cloudfront Cache invalidation
        run: aws cloudfront create-invalidation --distribution-id ${{env.CutieAppCDN}} --paths "/*"

      # Run Slack Notification
      - name: Slack Notification
        if: always() # Pick up events even if the job fails or is canceled.
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
        with:
          status: ${{ job.status }}
          author_name: Practera-Cutie-APP trunk branch - Deploy to AWS S3 Sync & invalidate cache
          mention: 'here'
          if_mention: failure,cancelled
          job_name: Build-Deploy # Match the name above.
          fields: repo,commit,eventName,ref,workflow,message,author,job,took
          custom_payload: |
            {
            username: 'GitHub Action CI WorkFlow',
            icon_emoji: ':github:',
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : ${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text:
             `${process.env.AS_REPO}\n
              ${process.env.AS_COMMIT}\n 
              ${process.env.AS_EVENT_NAME}\n
              @${process.env.AS_REF}\n
              @${process.env.AS_WORKFLOW}\n
              ${process.env.AS_MESSAGE}\n
              ${process.env.AS_AUTHOR}\n
              ${process.env.AS_JOB}\n
              ${process.env.AS_TOOK}`,
            }]
            }